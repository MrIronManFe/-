function test() {
    var a = 1;
    return function () {
        eval("");
    }
}
test();

/*
eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。
如果 eval() 的参数不是字符串， eval() 会将参数原封不动地返回。
如果你间接的使用 eval()，比如通过一个引用来调用它，而不是直接的调用 eval。 从 ECMAScript 5 起，它工作在全局作用域下，而不是局部作用域中。这就意味着，例如，下面的代码的作用声明创建一个全局函数，并且 eval 中的这些代码在执行期间不能在被调用的作用域中访问局部变量。

eval会欺骗此法作用域，例如在eval里面定义了var a = 1，因为不知道是否对a进行了引用，所以不会优化。
try,catch，with也不会被回收。
with声明实际是根据你传递进入的对象另外创建了一个新的此法作用域。with关键字可以改变词法作用域
*/