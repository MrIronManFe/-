/*
    给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效
  有效字符串需满⾜：
    1. 左括号必须⽤相同类型的右括号闭合。
    2. 左括号必须以正确的顺序闭合。
  注意空字符串可被认为是有效字符串。
  示例1：
      输⼊: "()"
      输出: true
  示例2：
      输⼊: "()[]{}"
      输出: true
  示例 3:
      输⼊: "(]"
      输出: false
  示例 4:
      输⼊: "([)]"
      输出: false
  示例 5:
      输⼊: "{[]}"
      输出: true
      
*/

// 思路
/*
1）首先，我们通过上边的例子可以分析出什么样子括号匹配是复合物条件的，两种情况。
    ①第一种（非嵌套情况）：{} [] ；
    ②第二种（嵌套情况）：{ [ ( ) ] } 。
除去这两种情况都不是符合条件的。
2）然后，我们将这些括号自右向左看做栈结构，右侧是栈顶，左侧是栈尾。
3）如果编译器中的括号是左括号，我们就入栈（左括号不用检查匹配）；如果是右括号，就取出栈顶元素检查是否匹配。
4）如果匹配，就出栈。否则，就返回 false；
*/


// 代码实现
var isValid = function (s) {
    let stack = [];
    var obj = {
        "[": "]",
        "{": "}",
        "(": ")",
    };
    // 取出字符串中的括号
    for (var i = 0; i < s.length; i++) {
        if (s[i] === "[" || s[i] === "{" || s[i] === "(") {
            // 如果是左括号，就进栈
            stack.push(s[i]);
        } else {
            // key是左括号
            var key = stack.pop();
            // 如果栈顶元素不相同，就返回false
            if (obj[key] !== s[i]) {
                return false;
            }
        }
    }
    return stack.length === 0
}