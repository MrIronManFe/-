Object.prototype.yideng = "京程一灯";
var a = 123; //Number
a.b = 456;
console.log(a.yideng); //京城一灯
console.log(a.b) //undeifined

// 京程一灯  undefined
/*
js两种类型的值：
基本类型、对象
在某些情况下，基本类型会表现得很像对象类型，使得用户可以像使用基本类型数据。这里得某些情况主要是指对对象的赋值和读取
例子：
var a = 123.1
console.log(a.toFixed(3))->123.100
a.name='yideng'
console.log(a.name)->undefined
这个例子说明了，基本类型可以像对象一样使用，包括访问属性，对象属性赋值（尽管实际上不起作用，但是形式上可以）
像a.b=456这种赋值
取决于a的类型
1、如果a是null或者undefined类型，会抛出错误
2、如果a是Object类型，正常赋值
3、如果a类型是数字、字符串或者布尔值，那么a变量不会以任何方式改变，上述分配操作将成为noop
所以将属性赋值给对象才有意义，否则根本啥也不做甚至可能报错
 */

/*
实际上就是装箱，当需要访问属性的时候，会临时创建一个对象，把基本类型的操作代理到这个临时变量上
'123'.xxx=String(123).xxx
操作完以后这个临时变量就不会有了
属性分配给基本类型有效的原因就是因为自动装箱，添加到的是临时变量对象上，而不是基本对象，所以无法获取
除非赋值有副作用，例如通过访问get和set函数实现
 */